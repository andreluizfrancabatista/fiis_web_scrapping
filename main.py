# -*- coding: utf-8 -*-
"""WebScraping - FlashScore.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qr3mASEik_iesvvoel-5v63csKk1feuj

Criado por:
*   Eduardo Lemos (@esniq1)
*   Leandro Filho (@futpythontrader)

# Instalando as Bibliotecas e as Dependências
"""

# Instalando o Selenium
# !pip install selenium

# Atualizando o Ubuntu para executar corretamento o apt-install
# !apt-get update

# Instalando o ChromeDrive e Trazendo ele para a Pasta Local
# !apt install chromium-chromedriver

# !cp /usr/lib/chromium-browser/chromedriver /usr/bin
import sys
sys.path.insert(0,'/usr/lib/chromium-browser/chromedriver')

"""# Configuração do Web-Driver"""

# Utilizando o WebDriver do Selenium
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# Instanciando o Objeto ChromeOptions
options = webdriver.ChromeOptions()

# Passando algumas opções para esse ChromeOptions
options.add_argument('--headless')
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')
options.add_argument('--start-maximized')
options.add_argument('--ignore-certificate-errors')
options.add_argument('--disable-crash-reporter')
options.add_argument('--log-level=3')


# Criação do WebDriver do Chrome
wd_Chrome = webdriver.Chrome('chromedriver',options=options)

"""# Importando as Bibliotecas"""

import pandas as pd
import time
from tqdm import tqdm
from selenium.webdriver.common.by import By
import matplotlib.pyplot as plt
import math

"""# Iniciando a Raspagem de Dados"""

# Com o WebDrive a gente consegue a pedir a página (URL)
wd_Chrome.get("https://fiis.com.br/") 
# time.sleep(2)

# Lista de fiis a serem analisados
fiis = ['habt11', 'urpr11', 'hctr11', 'deva11', 'bcri11']

# Percorrer a lista e coletar as informações
info = {
    'Ticker': [],
    'Data_base': [],
    'Data_pgto': [],
    'Cota_base': [],
    'DY': [],
    'Rendimento': [],
}

# Função que converte string para float
def moeda_string_to_float(string):
    numero_str = string.replace("R$", "").replace(",", ".")
    numero = float(numero_str)
    return numero

def porc_string_to_float(string):
    numero_str = string.replace("%", "").replace(",", ".")
    numero = float(numero_str)
    return numero

for fii in fiis:
    wd_Chrome.get(f'https://fiis.com.br/{fii}/')
    try:
        ticker = fii
        eventos = wd_Chrome.find_elements(By.CSS_SELECTOR, 'div.yieldChart__table__body > div.yieldChart__table__bloco')
        for evento in eventos:
            data_base = evento.find_element(By.CSS_SELECTOR, 'div:nth-child(1)').text.replace(".", "/")
            data_pgto = evento.find_element(By.CSS_SELECTOR, 'div:nth-child(2)').text.replace(".", "/")
            cota_base = evento.find_element(By.CSS_SELECTOR, 'div:nth-child(3)').text
            cota_base = moeda_string_to_float(cota_base)
            dy = evento.find_element(By.CSS_SELECTOR, 'div:nth-child(4)').text
            dy = porc_string_to_float(dy)
            rendimento = evento.find_element(By.CSS_SELECTOR, 'div:nth-child(5)').text
            rendimento = moeda_string_to_float(rendimento)
            # print(ticker, data_base, data_pgto, cota_base, dy, rendimento)
            info['Ticker'].append(ticker)
            info['Data_base'].append(data_base)
            info['Data_pgto'].append(data_pgto)
            info['Cota_base'].append(cota_base)
            info['DY'].append(dy)
            info['Rendimento'].append(rendimento)
    except:
        pass

df = pd.DataFrame(info)
print(df)

# Teste com o gráfico
# Converter as colunas de data para o tipo datetime
# df['Data_base'] = pd.to_datetime(df['Data_base'])
# df['Data_pgto'] = pd.to_datetime(df['Data_pgto'])

# Ordenar o DataFrame pela coluna Data_base
df.sort_values(by='Data_base', inplace=True)

# Agrupar os dados por ticker
agrupado = df.groupby('Ticker')

# Calcular o número de tickers únicos e o número de linhas e colunas necessárias
num_tickers = len(agrupado)
num_cols = 3
num_rows = math.ceil(num_tickers / num_cols)

# Configurar o layout dos subplots
fig, axs = plt.subplots(num_rows, num_cols, figsize=(15, 5 * num_rows))

# Iterar pelos grupos e plotar as linhas de rendimento em cada subplot
for i, (nome, grupo) in enumerate(agrupado):
    row = i // num_cols
    col = i % num_cols
    ax = axs[row, col]
    x = grupo['Data_base']
    y = grupo['Rendimento']
    ax.plot(x, y, label=nome)
    ax.set_ylabel('Rendimento')
    ax.set_title(f'Evolução dos Rendimentos - Ticker {nome}')
    ax.legend()

    # Configurar o rótulo do eixo x do último subplot de cada linha
    if row == num_rows - 1:
        ax.set_xlabel('Data Base')

    # Girar os rótulos do eixo x em 45 graus para melhor legibilidade em cada subplot
    ax.tick_params(axis='x', rotation=45)

    # Formatar as datas no eixo x para exibir apenas o dia e o mês
    ax.xaxis.set_major_formatter(plt.DateFormatter('%d/%m'))

    # Ajustar a legenda do eixo x para melhor legibilidade
    ax.xaxis.set_tick_params(labelsize=8)

# Remover subplots vazios, se necessário
if num_tickers < num_rows * num_cols:
    for i in range(num_tickers, num_rows * num_cols):
        fig.delaxes(axs.flatten()[i])

# Ajustar a margem entre os subplots
plt.tight_layout()

# Exibir o gráfico
plt.show()